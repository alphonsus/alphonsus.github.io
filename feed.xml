<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alphonsus</title>
    <description>Full-stack web developer by day, indie game developer by night.
</description>
    <link>alphonsus.github.io/</link>
    <atom:link href="alphonsus.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 12 Apr 2017 19:20:06 +0800</pubDate>
    <lastBuildDate>Wed, 12 Apr 2017 19:20:06 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Coding Like a Ninja</title>
        <description>&lt;p&gt;I’ve always been a firm believer that one of the most important traits of a great programmer is efficiency in typing code—keyboard shortcuts, macros, those sort of stuff that would save you a few milliseconds every time but when multiplied to almost every few lines of code, you potentially code 2, 3 times faster. I would cringe whenever I watch someone coding use the mouse very frequently to do things.&lt;/p&gt;

&lt;p&gt;In this quick blog post I’m listing some of my favorite efficiency tricks and shortcuts for Sublime Text, most of which should also be doable in other modern text editors like Atom and Visual Code.&lt;/p&gt;

&lt;h3 id=&quot;moving-the-cursor-around&quot;&gt;Moving the cursor around&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+Left/Right arrow&lt;/code&gt; moves to the beginning or end of line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+Up/Down arrow&lt;/code&gt; moves to the beginning or end of file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+Left/Right arrow&lt;/code&gt; moves to the beginning or end of previous/next word&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Holding &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt; with the above shortcuts will select text instead of moving.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+G&lt;/code&gt; to go to a line number&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+R&lt;/code&gt; to skip to a “symbol”. For example, function names, or CSS selectors in a CSS stylesheet, or headers in markdown file, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And my personal favorite:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+-&lt;/code&gt; to “jump back.” Remember that moment when you’re writing in line X of file Y, then you go do something else in a different tab/file, then you want to go back to that line X in file Y but you couldn’t remember where that was? This shortcut’ll do just that—it will return your cursor back to that line you just previously edited.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;opening-files&quot;&gt;Opening files&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+T&lt;/code&gt; to search and open files in a new tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sublime/openfiles.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I still see people who would look for a file among the hundreds of files and folders on the sidebar—you should almost never do that as long as you know the filename you’re looking for!&lt;/p&gt;

&lt;h3 id=&quot;manipulating-lines-of-code&quot;&gt;Manipulating lines of code&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/sublime/lines.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+Shift+D&lt;/code&gt; to duplicate line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+J&lt;/code&gt; to join the line below&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+K&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd+X&lt;/code&gt; (with no text highlighted) to delete whole line&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Cmd+Up/Arrow&lt;/code&gt; to move current/selected lines up or down.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These also work when multiple lines are highlighted. Which leads us to…&lt;/p&gt;

&lt;h3 id=&quot;multiple-cursors&quot;&gt;Multiple cursors&lt;/h3&gt;

&lt;p&gt;There’s this really cool trick to select multiple lines by holding Ctrl+Shift and pressing Up/Down arrow keys to add lines. Alternatively you could Cmd+click on text to manually add cursors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sublime/multiple.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or, you could use Ctrl+Cmd+G to find and select matches of the highlighted text.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sublime/multiple2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-key-bindings&quot;&gt;Some key bindings&lt;/h3&gt;

&lt;p&gt;Time for some key bindings! Open up Key Bindings - User file and add the following shortcuts.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ctrl+tab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;next_view&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ctrl+shift+tab&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prev_view&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alt+shift+r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reveal_in_side_bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ctrl+i&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reindent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;single_line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Tab&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+Tab&lt;/code&gt; will now cycle through tabs left to right and vice versa (just like in Chrome).
&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+I&lt;/code&gt; will automatically indent your code.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+Shift+R&lt;/code&gt; to reveal the current file’s location in the sidebar. Useful for when you need to see files in the same directory.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The way I did it was I’d familiarize one shortcut at a time until they gradually become second nature, e.g. for this week I’d get used to multiple lines selection, next week would be cursor movement shortcuts, etc. Remember to keep discovering new shortcuts by looking at your editor’s menu bar items!&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;— Alphonsus&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Oct 2016 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/coding-like-a-ninja/</link>
        <guid isPermaLink="true">alphonsus.github.io/coding-like-a-ninja/</guid>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Programmer Notebook Log #3 – Adding Core Functionality</title>
        <description>&lt;p&gt;This is the third of a devlog series in which I’m building a note-taking app for programmers. Last week’s progress was making a simple markdown editor in Electron. This past week I’ve added most of the core note-taking functionalities.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create a note&lt;/li&gt;
  &lt;li&gt;load the notes on startup and display them on a sidebar list&lt;/li&gt;
  &lt;li&gt;edit the notes and auto-save them to a local database&lt;/li&gt;
  &lt;li&gt;delete a note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other stuff I’ve worked on are making the editor feel like an actual IDE editor, and also adding tags (or categories) to notes.&lt;/p&gt;

&lt;p&gt;Also, since Log #2, I’ve switched to a new boilerplate. I used &lt;a href=&quot;http://github.com/sindresorhus/electron-boilerplate&quot;&gt;sindersorhus’s electron-boilerplate&lt;/a&gt; instead because I wanted my project to be as thin and minimal as possible and still have all the stuff I need.&lt;/p&gt;

&lt;h2 id=&quot;persisting-the-notes-to-a-local-storage&quot;&gt;Persisting the notes to a local storage&lt;/h2&gt;

&lt;p&gt;There’s multiple options to store data to a local database in Electron:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jviotti/electron-json-storage&quot;&gt;electron-json-storage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;localStorage&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/typicode/lowdb&quot;&gt;lowdb&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I went with lowdb mostly because it uses lodash API which is useful for querying. The other options also seem to be suited for stuff like user settings and defaults, as opposed to large texts with metadata for the notes app.&lt;/p&gt;

&lt;p&gt;Creating a new note and saving it to the database looks something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Require lowdb&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;lowdb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Initialize database&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/notesdb.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Save note&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;body&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Type something...&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;updated_at&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;notes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newNote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And retrieving notes is as simple as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;notes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;notes&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;notes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;note&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Do something with note...&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// console.log(note.body)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// console.log(note.updated_at)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;adding-text-editor-ish-features&quot;&gt;Adding Text Editor-ish Features&lt;/h2&gt;

&lt;p&gt;One of my important goals for the app is to make the markdown editor feel as close to what programmers are most comfortable on as possible, i.e. IDE’s and text editors like Sublime Text or Atom. Thanks to &lt;a href=&quot;https://ace.c9.io&quot;&gt;Ace Editor&lt;/a&gt;, an embeddable editor in Javascript—we can do just that!&lt;/p&gt;

&lt;p&gt;I converted my editor &lt;code class=&quot;highlighter-rouge&quot;&gt;textarea&lt;/code&gt; into an Ace Editor:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML template (index.html)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor-textarea&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And used the following settings:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Renderer process (app.js)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;editor-textarea&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ace/theme/github&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ace/mode/markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;showGutter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;fontFamily&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Menlo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;showLineNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;9pt&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cursorStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;slim smooth&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;showPrintMargin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;highlightActiveLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lineHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we have a markdown editor with markdown syntax highlighting and IDE/text editor keystrokes. Oh and it’s highly customizable too!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook3/editor.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-tags&quot;&gt;Adding Tags&lt;/h2&gt;

&lt;p&gt;Finally, one other important functionality is the ability to add tags to notes. For this, I used the &lt;a href=&quot;https://github.com/developit/tags-input&quot;&gt;tags-input&lt;/a&gt; module with some custom CSS. Here’s the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook3/tags.gif&quot; class=&quot;shadowed&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This past week I’ve finished most of the important functionalities and it’s actually pretty usable at this stage. From here on out, I’ll be focusing more on the design and UX for the app.&lt;/p&gt;

&lt;p&gt;— Alphonsus&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programmer Notebook Log Series:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/programmer-notebook&quot;&gt;Programmer Notebook Log #1 – Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/markdown-editor-in-electron&quot;&gt;Programmer Notebook Log #2 – Creating a Markdown Editor in Electron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Programmer Notebook Log #3 – Adding Core Functionality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/programming-notebook-core-functionality/</link>
        <guid isPermaLink="true">alphonsus.github.io/programming-notebook-core-functionality/</guid>
        
        
        <category>webdev</category>
        
        <category>electron</category>
        
      </item>
    
      <item>
        <title>Programmer Notebook Log #2 – Creating a Markdown Editor in Electron</title>
        <description>&lt;p&gt;This is the second entry of my devlog series in which I’m building a programmer-centric note-taking app for macOS. In this post I’ll talk about step #1, or, how to create a simple markdown editor in Electron.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-electron&quot;&gt;Setting up Electron&lt;/h1&gt;

&lt;p&gt;I used &lt;a href=&quot;https://github.com/sindresorhus/electron-boilerplate&quot;&gt;this boilerplate&lt;/a&gt; to get an Electron project up and running right away.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/szwacz/electron-boilerplate markdown-editor
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;markdown-editor
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There’s a lot of things included in the boilerplate, but there’s only three files that we really need for now.&lt;/p&gt;

&lt;h4 id=&quot;the-main-process--indexjs&quot;&gt;The Main Process – index.js&lt;/h4&gt;

&lt;p&gt;When an Electron app is started, the process that is run first is called the &lt;strong&gt;main process&lt;/strong&gt;, specified in &lt;strong&gt;package.json&lt;/strong&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; field. This is where we can create windows (&lt;code class=&quot;highlighter-rouge&quot;&gt;BrowserWindow&lt;/code&gt; instances), display a GUI and do all other OS-centric things.&lt;/p&gt;

&lt;h4 id=&quot;the-renderer-process--appappjs&quot;&gt;The Renderer Process – app/app.js&lt;/h4&gt;

&lt;p&gt;The other process is called the &lt;strong&gt;renderer process&lt;/strong&gt;, which is where most of the application and GUI-related logic goes.&lt;/p&gt;

&lt;h4 id=&quot;the-gui--appapphtml&quot;&gt;The GUI – app/app.html&lt;/h4&gt;

&lt;p&gt;And finally, since Electron uses web pages as its GUI, we need HTML templates.&lt;/p&gt;

&lt;p&gt;What &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; does is basically just run &lt;a href=&quot;(https://github.com/electron-userland/electron-prebuilt)&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;electron-prebuilt&lt;/code&gt;&lt;/a&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;electron .&lt;/code&gt; command to build and run the app.&lt;/p&gt;

&lt;p&gt;The initial boilerplate looks like this right off the box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook2/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Perfect! Now we can start messing around with the template.&lt;/p&gt;

&lt;h1 id=&quot;creating-the-ui&quot;&gt;Creating the UI&lt;/h1&gt;

&lt;p&gt;For now what I’m aiming for is just a basic markdown editor window with two columns, the editor on the left and the Markdown-ed HTML output on the right.&lt;/p&gt;

&lt;p&gt;The HTML that Electron renders as its GUI is in &lt;strong&gt;app/app.html&lt;/strong&gt;. Let’s add the two columns in our HTML template body.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app.html:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;editor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And add in the appropriate styles in &lt;strong&gt;main.less&lt;/strong&gt; until we get something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook2/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;img-caption&quot;&gt;That&#39;s a 100% height 50% width textarea and div with some paddings.&lt;/p&gt;

&lt;p&gt;It’s pretty much done at this point. Now we just need to add the part where typing stuff in the textarea displays the Markdown output on the right div. Should be kids’ stuff with plain ‘ol jQuery.&lt;/p&gt;

&lt;h1 id=&quot;markdown-editor&quot;&gt;Markdown Editor&lt;/h1&gt;

&lt;p&gt;First, install the jQuery library:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install jquery --save
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then add the following to &lt;strong&gt;app/app.js&lt;/strong&gt;, which is where our GUI code should go.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ... other imports&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;jquery&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Get references to #editor and #output&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#editor&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#output&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Removed some of the boilerplate code&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Whenever we type text in the textarea,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// display that text into the output div&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;input propertychange&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now when we type stuff into the textarea, the output div should display that text as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook2/3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we now have a Markdown editor! …Almost. It’s rendering stuff out on the display div, but we need it to actually display Markdown formatted text.&lt;/p&gt;

&lt;h1 id=&quot;actual-markdown-editing-part&quot;&gt;Actual Markdown Editing Part&lt;/h1&gt;

&lt;p&gt;There’s a library called &lt;a href=&quot;https://www.npmjs.com/package/marked&quot;&gt;marked&lt;/a&gt; that converts strings into markdown HTML, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;# hello&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install marked into our dependencies:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install marked --save
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Import the library in &lt;strong&gt;app.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import marked from &#39;marked&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we simply pass the textarea value into a &lt;code class=&quot;highlighter-rouge&quot;&gt;marked()&lt;/code&gt; function, which returns the Markdown-ed HTML. Still in &lt;strong&gt;app.js&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;input propertychange&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;outputHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;marked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outputHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that’s it! Now when you try typing Markdown syntax into the editor it should display Markdown formatted text on the output window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook2/4.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;img-caption&quot;&gt;It&#39;s an actual Markdown editor!&lt;/p&gt;

&lt;h1 id=&quot;one-last-thing&quot;&gt;One last thing&lt;/h1&gt;

&lt;p&gt;The Markdown-ed output looks ugly by its native vanilla HTML styles. Let’s fix that by using a Markdown stylesheet. I’m going with GitHub’s.&lt;/p&gt;

&lt;p&gt;We include the stylesheet in &lt;strong&gt;main.less:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;(less)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.4.0/github-markdown.css&quot;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;GitHub’s Markdown stylesheet is applied to &lt;code class=&quot;highlighter-rouge&quot;&gt;.markdown-body&lt;/code&gt;’s, so in &lt;strong&gt;app.html&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;markdown-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook2/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there you have it, a fully working GitHub-flavored Markdown editor. To build it to a native macOS application, simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run release&lt;/code&gt; and it should create DMG, zip and app files into a dist folder.&lt;/p&gt;

&lt;p&gt;On my next posts I will be adding more features like creating new notes and auto-saving them to disk.&lt;/p&gt;

&lt;p&gt;— Alphonsus&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/programmer-notebook&quot;&gt;Programmer Notebook Log #1 – Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Programmer Notebook Log #2 – Creating a Markdown Editor in Electron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/programming-notebook-core-functionality&quot;&gt;Programmer Notebook Log #3 – Adding Core Functionality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 15 Aug 2016 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/markdown-editor-in-electron/</link>
        <guid isPermaLink="true">alphonsus.github.io/markdown-editor-in-electron/</guid>
        
        
        <category>webdev</category>
        
        <category>electron</category>
        
      </item>
    
      <item>
        <title>Programmer Notebook Log #1 – Overview</title>
        <description>&lt;p&gt;Hello, I’m devlogging my process on making a programmer notebook app for macOS using Electron.&lt;/p&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;I take down programming notes and cheat sheets a LOT on my Mac’s Notes app. It usually looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While it usually gets the job done, it just isn’t meant to be a “programming notebook”:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A not-monospace font. Though we can change the font, it takes several keystrokes and clicks. And that’s &lt;em&gt;everytime&lt;/em&gt; we make a new note, since at the moment there is no way to set the default font. I want a monospace font right off the bat.&lt;/li&gt;
  &lt;li&gt;No markdown support.&lt;/li&gt;
  &lt;li&gt;Tags/categories feature. Yes we can organize notes into folders, and I do use that. But when I want notes to belong to multiple categories, folder organization can’t handle that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things I do like about the Notes app are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Auto-saving. I don’t have to open notes from files, or save new notes into files, then open them again when I need to.&lt;/li&gt;
  &lt;li&gt;It syncs across all my Apple devices.&lt;/li&gt;
  &lt;li&gt;It’s just really easy and efficient to use in general. Just create a new note, type stuff in, use some hotkeys to change the format (e.g. Cmd+Shift+H to set to Heading), close the app, open it again, continue where you left off, etc. No need to click save buttons or type in the Note title and stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;other-options&quot;&gt;Other options:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;A text editor like Sublime/Atom — what better app to take notes about programming on than the actual app you write programs on? Sure, but using a text editor would mean saving/opening files scattered everywhere on the disk. Besides, I would prefer to just have Sublime windows for actual projects, and have a separate app for note-taking.&lt;/li&gt;
  &lt;li&gt;Evernote — it’s too cluttered and overkill for a programming notebook.&lt;/li&gt;
  &lt;li&gt;Something else I haven’t heard of that might suit my needs, but it doesn’t really matter because…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-actual-problem&quot;&gt;The Actual Problem&lt;/h3&gt;

&lt;p&gt;To be honest, I just really &lt;em&gt;really&lt;/em&gt; want to make something in Electron.&lt;/p&gt;

&lt;h3 id=&quot;electron&quot;&gt;…Electron?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://electron.atom.io&quot;&gt;Electron&lt;/a&gt; (by GitHub) is a framework for creating native applications using web technologies. Atom, Slack, and Visual Code Studio among others are all made with Electron. I’ve always wanted to try and make something with it ever since I learned about it earlier this year.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;img-caption&quot;&gt;Cross-platform apps made in HTML, CSS and JS.&lt;/p&gt;

&lt;p&gt;And that’s where this I’ll-be-making-a-programming-notebook-app thing comes in—an attempt to create a Notes-esque app but more programmer-centric, using Electron. I’m envisioning it as a Markdown editor app, on steroids, with all the nice features we love in macOS Notes.&lt;/p&gt;

&lt;p&gt;On my next post(s) I will talk about my current progress with the development and a mini-tutorial on how to get started with creating Electron apps. You can find the source code &lt;a href=&quot;https://github.com/AlfonzM/md-editor&quot;&gt;in this GitHub repository&lt;/a&gt;. Be warned, I am not the best modern-JS coder! And I will probably be porting this and use an actual JS framework like React in the future, depending on how large the project gets.&lt;/p&gt;

&lt;p&gt;— Alphonsus&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Programmer Notebook Log Series:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Programmer Notebook Log #1 – Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/markdown-editor-in-electron&quot;&gt;Programmer Notebook Log #2 – Creating a Markdown Editor in Electron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/programming-notebook-core-functionality&quot;&gt;Programmer Notebook Log #3 – Adding Core Functionality&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 08 Aug 2016 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/programmer-notebook/</link>
        <guid isPermaLink="true">alphonsus.github.io/programmer-notebook/</guid>
        
        
        <category>webdev</category>
        
        <category>electron</category>
        
      </item>
    
      <item>
        <title>Designing Levels for Necromorph</title>
        <description>&lt;p&gt;Last week I &lt;a href=&quot;#&quot;&gt;made a post about&lt;/a&gt; our latest Ludum Dare game, Necromorph. This time I’d like to talk more about our thought process while designing the levels for our short game.&lt;/p&gt;

&lt;p&gt;I was focusing on making the level design both challenging and satisfying in a not-frustrating kind of way. More importantly, I wanted it to be self-teaching. Although the game works like a usual platformer game where you can jump and kill enemies, the game has a few unusual mechanics which I don’t want to explicitly explain to the player. I wanted the level design itself to teach the player, and the player to learn by doing. Also, the game was too short anyway that pretty much the whole game is a tutorial, kind of like Portal.&lt;/p&gt;

&lt;p&gt;Anyway, without further ado let’s hop right on to the first level!&lt;/p&gt;

&lt;h1 id=&quot;level-i-the-cavern&quot;&gt;Level I: The Cavern&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;The Cavern&lt;/em&gt; is the intro “tutorial” level where we teach the player the basic mechanics of the game. The Arrow Keys + Z controls are slapped right into your face and you’re kind of inside a pit where you have no other choice but to jump over the spikes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv1-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;img-caption&quot;&gt;Pretty basic platformer stuff.&lt;/p&gt;

&lt;p&gt;The only way to go through the first jump to the left and the second jump to the right is by &lt;em&gt;holding&lt;/em&gt; the jump button. If the player only taps the jump button, he will most likely not reach the platform. This teaches the player that the game has variable jump – you can make short jumps by quickly tapping Z, or bigger ones by holding it down much longer.&lt;/p&gt;

&lt;p&gt;Just to make sure that the player gets this, we then give him a much longer jump over a strip of spikes. The only way to land on the other side successfully is to hold the jump button all the way through – the maximum distance a jump can reach.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv1-2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;img-caption&quot;&gt;Hold that jump button down or you&#39;ll end up like this!&lt;/p&gt;

&lt;p&gt;The next section introduces a new platform type – wooden platforms. The only path is by going through the wooden platforms in which the player learns you can go up and down through them by pressing the down arrow. Kids’ stuff.&lt;/p&gt;

&lt;p&gt;Finally you arrive at the first exit door with an up arrow above it. So you stand in front of it and press, well, the up arrow and level 1 is complete.&lt;/p&gt;

&lt;!-- ![](/images/necromorph-levels/lv1-3.gif) --&gt;

&lt;h1 id=&quot;level-ii-the-chasm&quot;&gt;Level II: The Chasm&lt;/h1&gt;

&lt;p&gt;On to the next level. You are now introduced to the first enemy, the melee knight. The knight is idle and harmless with a big-ass X button above him, teaching the player the attack mechanic. So now you attack the knight with two strikes, and BOOM. You transform into the knight.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv2-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, I wanted to introduce another enemy type right away – the archer. How I did this was I created two pathways for the player: a) the platform on the top with a block that shields you from his shots, or b) the small ledge and platform below, out of the archer’s reach.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;/images/necromorph-levels/lv2-2.png&quot; alt=&quot;&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Either way, you are safe and most likely won’t get killed by the arrows. This way, you are given time to breathe and study the archer’s behavior in a not-frustrating and not-under-pressure way. You might learn that 1) the archer only shoots when you are a certain distance from him, and 2) there’s a short window between his attacks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv2-3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the help of your knowledge about wooden platforms in Level 1, you wait for the archer to fire once more then you go in for the kill. &lt;em&gt;Bam&lt;/em&gt;, now you’re the archer. You walk a bit and realize that archers are more agile and walk faster. You then see two more enemies on the right. You are kind of given the option to choose which one to transform into by killing it second.&lt;/p&gt;

&lt;p&gt;The rest of the level is then pretty straightforward until you get to the last enemy blocking the wooden platform, teaching you that bows can shoot upwards:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv2-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;level-iii-the-hollow&quot;&gt;Level III: The Hollow&lt;/h1&gt;

&lt;p&gt;The first section of The Hollow is pretty interesting: you see an archer on the left, and one below guarded by a knight. Instinctively, as shown above, you might take down the first archer on the left, kill the knight with two shots, then walk towards the second archer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv3-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there is a slightly better approach: take down the archer behind the knight first by jumping and shooting, &lt;em&gt;then&lt;/em&gt; kill the meat shield knight. This is one section of the game where there’s a little strategy or puzzle involved – sometimes you might want to plan out the order of your attacks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv3-2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All that happens while a little bat-looking guy is flapping his wings over some spikes. This is the 3rd enemy type and its ability is a flappy-bird like control where you hover up a bit when the jump button is pressed. I explicitly show this to the player by placing the bat above the spikes while he is constantly hovering.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be continued…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;— Alphonsus&lt;/p&gt;

&lt;!-- To utilize the new flying mechanic, I made the next  --&gt;

&lt;p&gt;&lt;a href=&quot;http://supernaught.itch.io/necromorph&quot;&gt;Play Necromorph on itch.io »&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-33/?action=preview&amp;amp;uid=25961&quot;&gt;Ludum Dare Entry Page »&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Sep 2015 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/designing-levels-for-necromorph/</link>
        <guid isPermaLink="true">alphonsus.github.io/designing-levels-for-necromorph/</guid>
        
        
        <category>gamedev</category>
        
        <category>ludumdare</category>
        
      </item>
    
      <item>
        <title>Necromorph: Our Ludum Dare 33 Game</title>
        <description>&lt;p&gt;Time for another Ludum Dare game jam, where game devs over the world gather and make a game over the weekend!&lt;/p&gt;

&lt;p&gt;This month’s Ludum Dare 33 is our 6th time joining the online game development competition. The theme was “You are the monster,” and this is what Dave and I came up with over the 72-hour game jam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph/title.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Necromorph&lt;/em&gt; is an action platformer game where you kill monsters and steal their identity – you become the last monster you killed and steal their abilities and appearance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph/2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;img-caption text-center&quot;&gt;Kill monsters, become the monster.&lt;/p&gt;

&lt;p&gt;There are three types of enemy units in the game: the melee knight, the archer, and the gargoyle, each with their own abilities and stats. The knight for example is heavy and slow but has high attack power. Archers are light and fast but needs two arrows to take down the knight.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph/1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s a total of 3 levels, the first being a tutorial level inspired by genius tutorial levels in games like Super Mario Bros. and Cave Story.&lt;/p&gt;

&lt;p&gt;I shall be making a post-mortem blog post where I will talk more about our thought process on designing the levels, as well as how the game fared on the game jam, so stay tuned! Meanwhile, go play Necromorph!&lt;/p&gt;

&lt;p&gt;— Alphonsus&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE: Level design post is &lt;a href=&quot;/designing-levels-for-necromorph&quot;&gt;here&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://supernaught.itch.io/necromorph&quot;&gt;Play Necromorph on itch.io »&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-33/?action=preview&amp;amp;uid=25961&quot;&gt;Ludum Dare Entry Page »&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/necromorph/</link>
        <guid isPermaLink="true">alphonsus.github.io/necromorph/</guid>
        
        
        <category>gamedev</category>
        
        <category>ludumdare</category>
        
      </item>
    
      <item>
        <title>LDJAM Bot tweets your games</title>
        <description>&lt;p&gt;A few months back I was itching to try and make some cool stuff with Python for days. One day I had this idea for a Twitter bot that selects a random game from the &lt;a href=&quot;http://ludumdare.com/compo&quot;&gt;Ludum Dare&lt;/a&gt; website and tweets it along with the dev’s username and the game’s primary screenshot.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/bs4/doc/&quot;&gt;BeautifulSoup&lt;/a&gt; to select a random game from the Ludum Dare website, pull the HTML and parse it to get the game title, developer username/Twitter handle and the game’s primary screenshot. I then tweet all those using &lt;a href=&quot;http://www.tweepy.org&quot;&gt;tweepy&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;how-it-works&quot;&gt;How it works&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: This is probably a really dirty implementation, and I’m open for suggestions. If you have any, leave a comment below!&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Select a random page number from &lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-33/?action=preview&quot;&gt;this page&lt;/a&gt;. Say, page 5.
 &lt;img src=&quot;/images/ldjambot/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select a random game from the page in Step 1 and get the game’s entry page URL.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/ldjambot/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To make sure we don’t tweet the same game more than once, the bot checks a .txt file that contains the list of all game URL’s that were previously tweeted. If the URL in Step 2 already exists, we don’t want to tweet that again, so go back to Step 1. Else, append the URL to this list.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/ldjambot/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We have now selected the LD game to tweet. So now we get the game title and the dev’s username or his Twitter handle. Thankfully, most of this stuff is provided for in the Twitter meta tags so it’s easier to fetch them using bs4. The game’s first screenshot image is also downloaded using &lt;code class=&quot;highlighter-rouge&quot;&gt;urllib.request&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/ldjambot/meta.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The “Twitter username” field when editing your Ludum Dare profile is really vague – a lot of people type in “twitter.com/username”, or “http://twitter.com/username” when all you really need is just your plain username and it’s automatically prepended with a @. This means I have to clean it up a bit so it properly mentions the developer in the tweet.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; if &#39;http://twitter.com/&#39; in twitterHandle:
     twitterUser = twitterHandle.replace(&quot;http://twitter.com/&quot;, &quot;&quot;)
 elif &#39;https://twitter.com/&#39; in twitterHandle:
     twitterUser = twitterHandle.replace(&quot;https://twitter.com/&quot;, &quot;&quot;)
 elif &#39;http://www.twitter.com/&#39; in twitterHandle:
     twitterUser = twitterHandle.replace(&quot;http://www.twitter.com/&quot;, &quot;&quot;)
 elif &#39;https://www.twitter.com/&#39; in twitterHandle:
     twitterUser = twitterHandle.replace(&quot;https://www.twitter.com/&quot;, &quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Prepare the tweet, making sure it fits 140 characters by trimming the title and adding an ellipsis:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tweet = title + &#39; by &#39; + author + &#39; - &#39; + url + &#39; #LDJAM #gamedev #indiedev&#39; 

 if len(tweet) &amp;gt; 140:
 charactersToTrim = len(tweet) - 137
 title = title[:-charactersToTrim] + &#39;...&#39;
 tweet = title + &#39; by &#39; + author + &#39; - &#39; + url + &#39; #LDJAM #gamedev #indiedev&#39; 
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, tweet it! The tweepy library has a method to post a tweet with media.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tweetStatus = api.update_with_media(&#39;img.jpg&#39;, tweet)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At this point I would simply run the python script every 30 minutes using CRON or a bash script. I also use &lt;a href=&quot;https://pypi.python.org/pypi/pync&quot;&gt;Notifier&lt;/a&gt; to ping me a native OS X notification so I would know when the bot actually tweets a game.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Notifier.notify(title + &#39; by &#39; + author + &#39; &#39; + twitterHandle, contentImage=&#39;img.jpg&#39;, appIcon=&#39;pp.png&#39;, title=&#39;@LDJAMBot&#39;, open=&#39;http://twitter.com/ldjambot&#39;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Overall it was a fun little Python experiment that turned into a Twitter account currently sitting at 400 followers!&lt;/p&gt;

&lt;p&gt;LDJAM Bot has been running and tweeting Ludum Dare games since LD33. Check out it out in action &lt;a href=&quot;http://twitter.com/ldjambot&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;— Alphonsus&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/ldjam-bot/</link>
        <guid isPermaLink="true">alphonsus.github.io/ldjam-bot/</guid>
        
        
        <category>gamedev</category>
        
        <category>ludumdare</category>
        
      </item>
    
      <item>
        <title>Post-Mortem: Adrift</title>
        <description>&lt;p&gt;LD31 is our 6th Ludum Dare. And after our failed attempt last August where both of us got sick on the last day (and later quit on the last few hours of the jam), we had one goal this LD: to make sure we finish the game this time.&lt;/p&gt;

&lt;p&gt;And, long story short: finish a game we did!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;/images/adrift-postmortem/3.png&quot; alt=&quot;&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;img-caption&quot;&gt;

Presenting &lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-31/?action=preview&amp;amp;uid=25961&quot;&gt;Adrift&lt;/a&gt; – a game about making friends, solving puzzles and teamwork.

&lt;/p&gt;

&lt;h1 id=&quot;what-went-well&quot;&gt;What Went Well&lt;/h1&gt;

&lt;p&gt;Pretty much everything in the Art department went well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Characters.&lt;/strong&gt; We always wanted to make a game with dorky adorable characters. The candy-ish color palette also went well with the cute character design.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Story.&lt;/strong&gt; The last 3 Ludum Dare games we made were fast-paced action games, so we thought hey why not give puzzle-y story-based games a shot? Our initial idea was to let the players get attached to the main character(s) and maybe leave them with an emotional ending. Which leads us to the…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ending.&lt;/strong&gt; We don’t want to spoil this to you guys so just check out the game and make sure to get to the ending scene! But basically we think we made a pretty decent ending for the really short game.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-didnt-go-so-well&quot;&gt;What Didn’t Go So Well&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Level design and mechanics.&lt;/strong&gt; During the first two days we made lots of different puzzle element mechanics such as stepping on switches to activate/deactivate traps or open doors. We planned to make lots of different “mini levels” and compile everything (the whole map, the entire game) on the 3rd day. While we were able to do this, some mechanics weren’t included in the final “master level” due to time constraints, so a lot of hours spent into implementing those unused mechanics were wasted. As a result, the “mini puzzle levels” in the game were pretty repetitive (Blue always pushing boxes) and the new mechanics introduced later into the game weren’t utilized as much.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gameplay.&lt;/strong&gt; We had lots of interesting puzzles when making the mini levels, but based on past experiences with the previous LD’s, people don’t want to invest a lot of time on your game. So we intended the game’s puzzle-y parts to be not so complex and frustrating to solve. This backfired a lot though because now I think the game isn’t really much fun to play and the puzzles not satisfying to solve. The upside though is most players can easily finish the whole game and see the end scene. And we badly want the players to see the end scene!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Theme.&lt;/strong&gt; Halfway through the jam and we still couldn’t come up with a concrete connection to the theme other than that the whole game is played in one whole level (or one Unity scene). But hey, finishing a game not related to the theme is better than not finishing a game related to the theme!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;/images/adrift-postmortem/5.png&quot; alt=&quot;&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Overall, we think we made a pretty solid and adorable game. Although the resulting gameplay wasn’t as fun to play as we thought it would be, everything we planned from the start went right, and the feedback has been really great so far and nothing we didn’t expect.&lt;/p&gt;

&lt;p&gt;If you reached this point, thank you for reading and we hope you enjoy Adrift! See you next Ludum Dare!&lt;/p&gt;

&lt;p&gt;— Alphonsus&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-31/?action=preview&amp;amp;uid=25961&quot;&gt;Ludum Dare Entry Page »&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Dec 2014 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/adrift-postmortem/</link>
        <guid isPermaLink="true">alphonsus.github.io/adrift-postmortem/</guid>
        
        
        <category>gamedev</category>
        
        <category>ludumdare</category>
        
      </item>
    
  </channel>
</rss>
