<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alphonsus</title>
    <description>Full-stack web developer; moonlights as a game developer at night.
</description>
    <link>alphonsus.github.io/</link>
    <atom:link href="alphonsus.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 Aug 2016 00:06:22 +0800</pubDate>
    <lastBuildDate>Tue, 09 Aug 2016 00:06:22 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Making A Programmer Notebook App #1</title>
        <description>&lt;p&gt;Hello. Starting today I will be “devlogging” my process on making a programmer notebook app.&lt;/p&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;I take down programming notes and cheat sheets a LOT on my Mac’s Notes app. It usually looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While it usually gets the job done, look at that mess. It definitely just isn’t meant to be a “programming notebook.”&lt;/p&gt;

&lt;p&gt;My issues with using Notes app as an app to take down programming notes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A not-monospace font. While we &lt;em&gt;can&lt;/em&gt; edit the font manually, it takes several keystrokes and clicks. And that’s &lt;em&gt;everytime&lt;/em&gt; we make a new note, since at the time of writing there is no way to set the default font. We need a monospace font right off the bat.&lt;/li&gt;
  &lt;li&gt;No markdown support.&lt;/li&gt;
  &lt;li&gt;Tags/categories feature. Yes we can organize notes into folders, and I do use that. But sometimes I also want notes to have multiple tags/categories, which I can then filter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things I do like about the Notes app are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Auto-saving. I don’t have to open notes from files, or save new notes into files, then open them again when I need to.&lt;/li&gt;
  &lt;li&gt;It syncs across all my Apple devices.&lt;/li&gt;
  &lt;li&gt;It’s just really easy and efficient to use in general. Just create a new note, type stuff in, use some hotkeys to change the format (e.g. Cmd+Shift+H to set to Heading), close the app, open it again, continue where you left off, etc. No need to click save buttons or type in the Note title and stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;So that’s where this I’ll-be-making-a-programming-notebook-app thing comes in—an attempt to create a Notes-esque app but more programmer-centric. I’m envisioning it as a markdown editor but with all the nice features we love in Notes.app. And hey, this will be a perfect excuse for me to finally start learning Electron!&lt;/p&gt;

&lt;h3 id=&quot;electron&quot;&gt;…Electron?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/prog-notebook/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://electron.atom.io&quot;&gt;Electron&lt;/a&gt; is a framework to create native applications using web technologies. Atom, Slack, Visual Code Studio, among others are all made with this framework. I’ve always wanted to try and make something with it ever since I heard about it earlier this year. I will be using it for this project given my familiarity with creating web apps as opposed to creating native macOS apps.&lt;/p&gt;

&lt;p&gt;On my next post(s) I will talk about my current progress with the development and a mini-tutorial on how to get started with creating Electron apps. Here’s the project’s &lt;a href=&quot;https://github.com/AlfonzM/markdown-editor&quot;&gt;source code&lt;/a&gt;. Be warned, I am not the best modern-JS coder! And I will probably be porting this and use an actual JS framework like React in the future, depending on how large the project gets.&lt;/p&gt;

&lt;p&gt;– Alphonsus&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Aug 2016 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/programmer-notebook/</link>
        <guid isPermaLink="true">alphonsus.github.io/programmer-notebook/</guid>
        
        
        <category>electron</category>
        
      </item>
    
      <item>
        <title>Designing Levels for Necromorph</title>
        <description>&lt;p&gt;Last week I &lt;a href=&quot;#&quot;&gt;made a post about&lt;/a&gt; our latest Ludum Dare game, Necromorph. This time I’d like to talk more about our thought process while designing the levels for our short game.&lt;/p&gt;

&lt;p&gt;I was focusing on making the level design both challenging and satisfying in a not-frustrating kind of way. More importantly, I wanted it to be self-teaching. Although the game works like a usual platformer game where you can jump and kill enemies, the game has a few unusual mechanics which I don’t want to explicitly explain to the player. I wanted the level design itself to teach the player, and the player to learn by doing. Also, the game was too short anyway that pretty much the whole game is a tutorial, kind of like Portal.&lt;/p&gt;

&lt;p&gt;Anyway, without further ado let’s hop right on to the first level!&lt;/p&gt;

&lt;h1 id=&quot;level-i-the-cavern&quot;&gt;Level I: The Cavern&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;The Cavern&lt;/em&gt; is the intro “tutorial” level where we teach the player the basic mechanics of the game. The Arrow Keys + Z controls are slapped right into your face and you’re kind of inside a pit where you have no other choice but to jump over the spikes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv1-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;img-caption&quot;&gt;Pretty basic platformer stuff.&lt;/p&gt;

&lt;p&gt;The only way to go through the first jump to the left and the second jump to the right is by &lt;em&gt;holding&lt;/em&gt; the jump button. If the player only taps the jump button, he will most likely not reach the platform. This teaches the player that the game has variable jump – you can make short jumps by quickly tapping Z, or bigger ones by holding it down much longer.&lt;/p&gt;

&lt;p&gt;Just to make sure that the player gets this, we then give him a much longer jump over a strip of spikes. The only way to land on the other side successfully is to hold the jump button all the way through – the maximum distance a jump can reach.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv1-2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;img-caption&quot;&gt;Hold that jump button down or you&#39;ll end up like this!&lt;/p&gt;

&lt;p&gt;The next section introduces a new platform type – wooden platforms. The only path is by going through the wooden platforms in which the player learns you can go up and down through them by pressing the down arrow. Kids’ stuff.&lt;/p&gt;

&lt;p&gt;Finally you arrive at the first exit door with an up arrow above it. So you stand in front of it and press, well, the up arrow and level 1 is complete.&lt;/p&gt;

&lt;!-- ![](/images/necromorph-levels/lv1-3.gif) --&gt;

&lt;h1 id=&quot;level-ii-the-chasm&quot;&gt;Level II: The Chasm&lt;/h1&gt;

&lt;p&gt;On to the next level. You are now introduced to the first enemy, the melee knight. The knight is idle and harmless with a big-ass X button above him, teaching the player the attack mechanic. So now you attack the knight with two strikes, and BOOM. You transform into the knight.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv2-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, I wanted to introduce another enemy type right away – the archer. How I did this was I created two pathways for the player: a) the platform on the top with a block that shields you from his shots, or b) the small ledge and platform below, out of the archer’s reach.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;/images/necromorph-levels/lv2-2.png&quot; alt=&quot;&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Either way, you are safe and most likely won’t get killed by the arrows. This way, you are given time to breathe and study the archer’s behavior in a not-frustrating and not-under-pressure way. You might learn that 1) the archer only shoots when you are a certain distance from him, and 2) there’s a short window between his attacks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv2-3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the help of your knowledge about wooden platforms in Level 1, you wait for the archer to fire once more then you go in for the kill. &lt;em&gt;Bam&lt;/em&gt;, now you’re the archer. You walk a bit and realize that archers are more agile and walk faster. You then see two more enemies on the right. You are kind of given the option to choose which one to transform into by killing it second.&lt;/p&gt;

&lt;p&gt;The rest of the level is then pretty straightforward until you get to the last enemy blocking the wooden platform, teaching you that bows can shoot upwards:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv2-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;level-iii-the-hollow&quot;&gt;Level III: The Hollow&lt;/h1&gt;

&lt;p&gt;The first section of The Hollow is pretty interesting: you see an archer on the left, and one below guarded by a knight. Instinctively, as shown above, you might take down the first archer on the left, kill the knight with two shots, then walk towards the second archer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv3-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there is a slightly better approach: take down the archer behind the knight first by jumping and shooting, &lt;em&gt;then&lt;/em&gt; kill the meat shield knight. This is one section of the game where there’s a little strategy or puzzle involved – sometimes you might want to plan out the order of your attacks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph-levels/lv3-2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All that happens while a little bat-looking guy is flapping his wings over some spikes. This is the 3rd enemy type and its ability is a flappy-bird like control where you hover up a bit when the jump button is pressed. I explicitly show this to the player by placing the bat above the spikes while he is constantly hovering.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be continued…&lt;/em&gt;&lt;/p&gt;

&lt;!-- To utilize the new flying mechanic, I made the next  --&gt;

&lt;p&gt;&lt;a href=&quot;http://supernaught.itch.io/necromorph&quot;&gt;Play Necromorph on itch.io »&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-33/?action=preview&amp;amp;uid=25961&quot;&gt;Ludum Dare Entry Page »&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Sep 2015 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/designing-levels-for-necromorph/</link>
        <guid isPermaLink="true">alphonsus.github.io/designing-levels-for-necromorph/</guid>
        
        
        <category>gamedev</category>
        
        <category>ludumdare</category>
        
      </item>
    
      <item>
        <title>Necromorph: Our Ludum Dare 33 Game</title>
        <description>&lt;p&gt;&lt;em&gt;Time for another&lt;/em&gt; Ludum Dare game jam, where game devs over the world gather and make a game over the weekend!&lt;/p&gt;

&lt;p&gt;This month’s Ludum Dare 33 is our 6th time joining the online game development competition. The theme was “You are the monster,” and this is what Dave and I came up with over the 72-hour game jam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph/title.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Necromorph&lt;/em&gt; is an action platformer game where you kill monsters and steal their identity – you become the last monster you killed and steal their abilities and appearance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph/2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;img-caption text-center&quot;&gt;Kill monsters, become the monster.&lt;/p&gt;

&lt;p&gt;There are three types of enemy units in the game: the melee knight, the archer, and the gargoyle, each with their own abilities and stats. The knight for example is heavy and slow but has high attack power. Archers are light and fast but needs two arrows to take down the knight.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/necromorph/1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s a total of 3 levels, the first being a tutorial level inspired by genius tutorial levels in games like Super Mario Bros. and Cave Story.&lt;/p&gt;

&lt;p&gt;I shall be making a post-mortem blog post where I will talk more about our thought process on designing the levels, as well as how the game fared on the game jam, so stay tuned! Meanwhile, go play Necromorph!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE: Level design post is &lt;a href=&quot;/designing-levels-for-necromorph&quot;&gt;here&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://supernaught.itch.io/necromorph&quot;&gt;Play Necromorph on itch.io »&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-33/?action=preview&amp;amp;uid=25961&quot;&gt;Ludum Dare Entry Page »&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/necromorph/</link>
        <guid isPermaLink="true">alphonsus.github.io/necromorph/</guid>
        
        
        <category>gamedev</category>
        
        <category>ludumdare</category>
        
      </item>
    
      <item>
        <title>LDJAM Bot tweets your games</title>
        <description>&lt;p&gt;A few months back I was itching to try and make some cool stuff with Python for days. One day I had this idea for a Twitter bot that selects a random game from the &lt;a href=&quot;http://ludumdare.com/compo&quot;&gt;Ludum Dare&lt;/a&gt; website and tweets it along with the dev’s username and the game’s primary screenshot.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/bs4/doc/&quot;&gt;BeautifulSoup&lt;/a&gt; to select a random game from the Ludum Dare website, pull the HTML and parse it to get the game title, developer username/Twitter handle and the game’s primary screenshot. I then tweet all those using &lt;a href=&quot;http://www.tweepy.org&quot;&gt;tweepy&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;how-it-works&quot;&gt;How it works&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: This is probably a really dirty implementation, and I’m open for suggestions. If you have any, leave a comment below!&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Select a random page number from &lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-33/?action=preview&quot;&gt;this page&lt;/a&gt;. Say, page 5.
 &lt;img src=&quot;/images/ldjambot/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select a random game from the page in Step 1 and get the game’s entry page URL.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/ldjambot/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To make sure we don’t tweet the same game more than once, the bot checks a .txt file that contains the list of all game URL’s that were previously tweeted. If the URL in Step 2 already exists, we don’t want to tweet that again, so go back to Step 1. Else, append the URL to this list.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/ldjambot/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We have now selected the LD game to tweet. So now we get the game title and the dev’s username or his Twitter handle. Thankfully, most of this stuff is provided for in the Twitter meta tags so it’s easier to fetch them using bs4. The game’s first screenshot image is also downloaded using &lt;code class=&quot;highlighter-rouge&quot;&gt;urllib.request&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/ldjambot/meta.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The “Twitter username” field when editing your Ludum Dare profile is really vague – a lot of people type in “twitter.com/username”, or “http://twitter.com/username” when all you really need is just your plain username and it’s automatically prepended with a @. This means I have to clean it up a bit so it properly mentions the developer in the tweet.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; if &#39;http://twitter.com/&#39; in twitterHandle:
     twitterUser = twitterHandle.replace(&quot;http://twitter.com/&quot;, &quot;&quot;)
 elif &#39;https://twitter.com/&#39; in twitterHandle:
     twitterUser = twitterHandle.replace(&quot;https://twitter.com/&quot;, &quot;&quot;)
 elif &#39;http://www.twitter.com/&#39; in twitterHandle:
     twitterUser = twitterHandle.replace(&quot;http://www.twitter.com/&quot;, &quot;&quot;)
 elif &#39;https://www.twitter.com/&#39; in twitterHandle:
     twitterUser = twitterHandle.replace(&quot;https://www.twitter.com/&quot;, &quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Prepare the tweet, making sure it fits 140 characters by trimming the title and adding an ellipsis:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tweet = title + &#39; by &#39; + author + &#39; - &#39; + url + &#39; #LDJAM #gamedev #indiedev&#39; 

 if len(tweet) &amp;gt; 140:
 charactersToTrim = len(tweet) - 137
 title = title[:-charactersToTrim] + &#39;...&#39;
 tweet = title + &#39; by &#39; + author + &#39; - &#39; + url + &#39; #LDJAM #gamedev #indiedev&#39; 
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, tweet it! The tweepy library has a method to post a tweet with media.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; tweetStatus = api.update_with_media(&#39;img.jpg&#39;, tweet)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At this point I would simply run the python script every 30 minutes using CRON or a bash script. I also use &lt;a href=&quot;https://pypi.python.org/pypi/pync&quot;&gt;Notifier&lt;/a&gt; to ping me a native OS X notification so I would know when the bot actually tweets a game.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Notifier.notify(title + &#39; by &#39; + author + &#39; &#39; + twitterHandle, contentImage=&#39;img.jpg&#39;, appIcon=&#39;pp.png&#39;, title=&#39;@LDJAMBot&#39;, open=&#39;http://twitter.com/ldjambot&#39;)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Overall it was a fun little Python experiment that turned into a Twitter account currently sitting at 400 followers!&lt;/p&gt;

&lt;p&gt;LDJAM Bot has been running and tweeting Ludum Dare games since LD33. Check out it out in action &lt;a href=&quot;http://twitter.com/ldjambot&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;– Alphonsus&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/ldjam-bot/</link>
        <guid isPermaLink="true">alphonsus.github.io/ldjam-bot/</guid>
        
        
        <category>gamedev</category>
        
        <category>ludumdare</category>
        
      </item>
    
      <item>
        <title>Post-Mortem: Adrift</title>
        <description>&lt;p&gt;LD31 is our 6th Ludum Dare. And after our failed attempt last August where both of us got sick on the last day (and later quit on the last few hours of the jam), we had one goal this LD: to make sure we finish the game this time.&lt;/p&gt;

&lt;p&gt;And, long story short: finish a game we did!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;/images/adrift-postmortem/3.png&quot; alt=&quot;&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;img-caption&quot;&gt;

Presenting &lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-31/?action=preview&amp;amp;uid=25961&quot;&gt;Adrift&lt;/a&gt; – a game about making friends, solving puzzles and teamwork.

&lt;/p&gt;

&lt;h1 id=&quot;what-went-well&quot;&gt;What Went Well&lt;/h1&gt;

&lt;p&gt;Pretty much everything in the Art department went well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Characters.&lt;/strong&gt; We always wanted to make a game with dorky adorable characters. The candy-ish color palette also went well with the cute character design.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Story.&lt;/strong&gt; The last 3 Ludum Dare games we made were fast-paced action games, so we thought hey why not give puzzle-y story-based games a shot? Our initial idea was to let the players get attached to the main character(s) and maybe leave them with an emotional ending. Which leads us to the…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ending.&lt;/strong&gt; We don’t want to spoil this to you guys so just check out the game and make sure to get to the ending scene! But basically we think we made a pretty decent ending for the really short game.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-didnt-go-so-well&quot;&gt;What Didn’t Go So Well&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Level design and mechanics.&lt;/strong&gt; During the first two days we made lots of different puzzle element mechanics such as stepping on switches to activate/deactivate traps or open doors. We planned to make lots of different “mini levels” and compile everything (the whole map, the entire game) on the 3rd day. While we were able to do this, some mechanics weren’t included in the final “master level” due to time constraints, so a lot of hours spent into implementing those unused mechanics were wasted. As a result, the “mini puzzle levels” in the game were pretty repetitive (Blue always pushing boxes) and the new mechanics introduced later into the game weren’t utilized as much.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gameplay.&lt;/strong&gt; We had lots of interesting puzzles when making the mini levels, but based on past experiences with the previous LD’s, people don’t want to invest a lot of time on your game. So we intended the game’s puzzle-y parts to be not so complex and frustrating to solve. This backfired a lot though because now I think the game isn’t really much fun to play and the puzzles not satisfying to solve. The upside though is most players can easily finish the whole game and see the end scene. And we badly want the players to see the end scene!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Theme.&lt;/strong&gt; Halfway through the jam and we still couldn’t come up with a concrete connection to the theme other than that the whole game is played in one whole level (or one Unity scene). But hey, finishing a game not related to the theme is better than not finishing a game related to the theme!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;img src=&quot;/images/adrift-postmortem/5.png&quot; alt=&quot;&quot; /&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Overall, we think we made a pretty solid and adorable game. Although the resulting gameplay wasn’t as fun to play as we thought it would be, everything we planned from the start went right, and the feedback has been really great so far and nothing we didn’t expect.&lt;/p&gt;

&lt;p&gt;If you reached this point, thank you for reading and we hope you enjoy Adrift! See you next Ludum Dare!&lt;/p&gt;

&lt;p&gt;– Alphonsus&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ludumdare.com/compo/ludum-dare-31/?action=preview&amp;amp;uid=25961&quot;&gt;Ludum Dare Entry Page »&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Dec 2014 00:00:00 +0800</pubDate>
        <link>alphonsus.github.io/adrift-postmortem/</link>
        <guid isPermaLink="true">alphonsus.github.io/adrift-postmortem/</guid>
        
        
        <category>gamedev</category>
        
        <category>ludumdare</category>
        
      </item>
    
  </channel>
</rss>
